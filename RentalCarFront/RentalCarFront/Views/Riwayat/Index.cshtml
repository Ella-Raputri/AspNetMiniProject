@{
    ViewData["Title"] = "Riwayat Penyewaan";
}
<h1>@ViewData["Title"] Mobil</h1>

<div class="table-container">
    <table id="rentalHistoryTable" style="width: 100%; border-collapse: collapse;">
        <thead>
            <tr>
                <th>Tanggal Sewa</th>
                <th>Mobil</th>
                <th>Harga Sewa per Hari</th>
                <th>Total Hari</th>
                <th>Total Harga</th>
                <th>Status Pembayaran</th>
            </tr>
        </thead>
        <tbody id="rentalHistory"></tbody>
    </table>    
</div>

<div id="paymentModal" style="display:none; position:fixed; top:50%; left:50%; transform:translate(-50%, -50%); background-color:white; padding:20px; border-radius:8px; box-shadow:0px 0px 10px rgba(0,0,0,0.5);">
    <h2>Select Payment Method</h2>
    <select id="paymentMethod">
        <option value="Cash">Cash</option>
        <option value="Credit">Credit Card</option>
        <option value="Debit">Debit Card</option>
    </select>
    <button onclick="confirmPayment()">Confirm</button>
    <button onclick="closeModal()">Cancel</button>
</div>


<div id="noDataMessage" style="display:none;">Data tidak ditemukan. Silakan login untuk melihat riwayat sewa Anda.</div>


@section Scripts {
    <script>
        const userId = sessionStorage.getItem('CustomerId'); 
        let selectedRentalId = null;
        let totalPrice = null;

        async function fetchRentalHistory() {
            try {
                const response = await fetch(`http://localhost:7100/api/Rental/Riwayat?userId=${userId}`, {
                    method: 'GET',
                    credentials: 'include' 
                });


                const result = await response.json();

                if (response.ok && result.length > 0) {
                    const rentalHistoryContainer = document.getElementById('rentalHistory');
                    rentalHistoryContainer.innerHTML = ''; 

                    result.forEach(item => {
                        rentalHistoryContainer.innerHTML += `
                            <tr class="rental-item" data-rental-id="${item.rentalId}">
                                <td>${item.rentalDate}</td>
                                <td>${item.carName}</td>
                                <td>Rp ${item.pricePerDay.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",")}</td>
                                <td>${item.totalDays}</td>
                                <td class="totalPrice">Rp ${item.totalPrice.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",")}</td>
                                <td class="${item.status ? 'status-paid' : 'status-pending'}">${item.status ? 'Sudah Dibayar' : 'Belum Dibayar'}</td>
                            </tr>
                        `;
                    });

                } else {
                    document.getElementById('noDataMessage').style.display = 'block';
                }
            } catch (error) {
                console.error('Error fetching rental history:', error);
                document.getElementById('noDataMessage').style.display = 'block';
            }
        }

        document.getElementById('rentalHistoryTable').addEventListener('click', function(event) {
            const row = event.target.closest('.rental-item');
            if (row) {
                const statusCell = row.querySelector('.status-pending');

                if (statusCell) { 
                    selectedRentalId = row.getAttribute('data-rental-id'); // Save rental ID
                    totalPrice = row.querySelector('.totalPrice').textContent.replace(/[^0-9]/g, '');
                    console.log('Rental ID:', selectedRentalId);
                    openModal(); 
                }
            }
        });

        function openModal() {
            document.getElementById('paymentModal').style.display = 'block';
        }

        function closeModal() {
            document.getElementById('paymentModal').style.display = 'none';
            selectedRentalId = null; 
        }

        async function confirmPayment() {
            const paymentMethod = document.getElementById('paymentMethod').value;
            const paymentDate = new Date().toISOString(); 
            const amount = parseInt(totalPrice);; 

            // Construct payment request payload
            const paymentData = {
                PaymentDate: paymentDate,
                Amount: amount,
                PaymentMethod: paymentMethod,
                RentalId: selectedRentalId
            };

            try {
                const response = await fetch('http://localhost:7100/api/Rental/Payment', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(paymentData),
                    credentials: 'include' 
                });

                const result = await response.json();
                if (response.ok) {
                    console.log('Payment successful:', result);
                    closeModal();
                    fetchRentalHistory();
                } else {
                    console.error('Payment failed:', result.Data);
                }
            } catch (error) {
                console.error('Error processing payment:', error);
            }
        }



        document.addEventListener('DOMContentLoaded', fetchRentalHistory);
    </script>
}

<style>
h1 {
    font-size: 24px;
    color: #333;
    margin-top: 50px;
    margin-bottom: 50px;
    text-align: center;
}

.table-container {
    margin-top: 40px;
    overflow-x: auto;
    margin: 0 auto; 
    width: 80%;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2); 
    border-radius: 8px; 
    background-color: #fff; 
}

table {
    width: 100%;
    border-collapse: collapse;
}

th, td {
    border: 1px solid #ccc; 
    padding: 12px; 
    text-align: left;
}

th {
    background-color: #898989; 
    color: #ffffff; 
    font-weight: bold;
} 

tr:nth-child(odd) {
    background-color: #f9f9f9;
}

tr:nth-child(even) {
    background-color: #f1f1f1; 
}

#noDataMessage {
    color: rgb(124, 0, 0); 
    text-align: center; 
    font-weight: bold; 
    margin-top: 20px; 
}

.status-pending{
    color: rgb(219, 0, 0);
    font-weight: semibold;
}
.status-pending:hover{
    color: rgb(255, 121, 121);
}
.status-paid{
    font-weight: semibold;
    color: rgb(0, 124, 8);
}
</style>
